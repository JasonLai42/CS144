/* Code started out from the skeleton of the CS144 Project 2 zip file */
/* Some code adapted from JDBC Tutorial from Part B of CS144 Project 2: http://oak.cs.ucla.edu/classes/cs144/jdbc/index.html */
import java.io.IOException;
import java.sql.* ;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.servlet.Servlet;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.sql.DataSource;

import org.commonmark.node.*;
import org.commonmark.parser.Parser;
import org.commonmark.renderer.html.HtmlRenderer;

/**
 * Servlet implementation class for Servlet: ConfigurationTest
 * 
 */
public class Editor extends HttpServlet {
    /**
     * The Servlet constructor
     * 
     * @see javax.servlet.http.HttpServlet#HttpServlet()
     */
    public Editor() {}

    public void init() throws ServletException
    {
        /*  write any servlet initialization code here or remove this function */
    }
    
    public void destroy()
    {
        /*  write any servlet cleanup code here or remove this function */
    }

    /**
     * Handles HTTP GET requests
     * 
     * @see javax.servlet.http.HttpServlet#doGet(HttpServletRequest request,
     *      HttpServletResponse response)
     */
    public void doGet(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException 
    {
	// implement your GET method handling code here
	// currently we simply show the page generated by "edit.jsp"

        /* JDBC OBJECTS */
        Connection c = null;
        PreparedStatement ps = null; 
        ResultSet rs = null;

        /* GET THE ACTION WE ARE DOING (open, preview, list) */
        String action_type = request.getParameter("action");

        /* HANDLE THE ACTION */
        String page_title;
        switch(action_type) {
            case "open": {
                // REQUIRED PARAMETERS
                String username = request.getParameter("username");
                String postid = request.getParameter("postid");
                if(username == null || postid == null) {
                    response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Missing required parameters");
                    return;
                }

                // OPTIONAL PARAMETERS
                String post_title = request.getParameter("title");
                String post_body = request.getParameter("body");

                // Parse postid, make sure it's a number
                int postid_num;
                try {
                    postid_num = Integer.parseInt(postid);
                }
                catch(NumberFormatException ex) {
                    response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid postid");
                    return;
                }

                // Handle edit page according to postid value
                if(postid_num == 0) { 
                    if(post_title == null) { post_title = ""; }
                    if(post_body == null) { post_body = ""; }
                }
                else if(postid_num > 0) { 
                    if(post_title == null || post_body == null) {
                        try {
                            /* CREATE CONNECTION OBJECT INSTANCE */
                            c = DriverManager.getConnection("jdbc:mariadb://localhost:3306/CS144", "cs144", "");

                            /* CREATE PREPAREDSTATEMENT FOR QUERY */
                            ps = c.prepareStatement("SELECT * FROM Posts WHERE username = ? AND postid = ?");
                            ps.setString(1, username);
                            ps.setInt(2, postid_num);

                            /* EXECUTE QUERY */
                            rs = ps.executeQuery();

                            /* IF RESULT SET IS EMPTY, RETURN 404 NOT FOUND; OTHERWISE GET THE POST'S TITLE AND BODY */
                            if(rs.next() == false) {
                                try { rs.close(); } catch (Exception e) { /* ignored */ }
                                try { ps.close(); } catch (Exception e) { /* ignored */ }
                                try { c.close(); } catch (Exception e) { /* ignored */ }
                                response.sendError(HttpServletResponse.SC_NOT_FOUND, "Post with specified username or postid not found");
                                return;
                            }
                            else {
                                do {
                                    post_title = rs.getString("title");
                                    post_body = rs.getString("body");
                                } while(rs.next());
                            }
                        } 
                        catch(SQLException ex) {
                            try { rs.close(); } catch (Exception e) { /* ignored */ }
                            try { ps.close(); } catch (Exception e) { /* ignored */ }
                            try { c.close(); } catch (Exception e) { /* ignored */ }
                            response.sendError(HttpServletResponse.SC_NOT_FOUND, "SQLException encountered");
                            return;
                        }
                        finally {
                            try { rs.close(); } catch (Exception e) { /* ignored */ }
                            try { ps.close(); } catch (Exception e) { /* ignored */ }
                            try { c.close(); } catch (Exception e) { /* ignored */ }
                        }
                    }
                }
                else {
                    response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid postid");
                    return;
                }

                // Send data necessary for presentation and form submissions
                page_title = "Edit Post (Edit Page)";
                request.setAttribute("page_title", page_title);
                request.setAttribute("username", username);
                request.setAttribute("postid", postid_num);
                request.setAttribute("post_title", post_title);
                request.setAttribute("post_body", post_body);

                response.setStatus(HttpServletResponse.SC_OK);
                request.getRequestDispatcher("/edit.jsp").forward(request, response);
                break;
            }
            case "preview": {
                // REQUIRED PARAMETERS
                String username = request.getParameter("username");
                String postid = request.getParameter("postid");
                String post_title = request.getParameter("title");
                String post_body = request.getParameter("body");
                if(username == null || postid == null || post_title == null || post_body == null) {
                    response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Missing required parameters");
                    return;
                }

                // Parse postid, make sure it's a number
                int postid_num;
                try {
                    postid_num = Integer.parseInt(postid);
                }
                catch(NumberFormatException ex) {
                    response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid postid");
                    return;
                }

                // Send data necessary for presentation and form submissions
                page_title = "Preview Post (Preview Page)";
                request.setAttribute("page_title", page_title);
                request.setAttribute("username", username);
                request.setAttribute("postid", postid_num);
                request.setAttribute("post_title", post_title);
                request.setAttribute("post_body", post_body);

                response.setStatus(HttpServletResponse.SC_OK);
                request.getRequestDispatcher("/preview.jsp").forward(request, response);
                break;
            }
            case "list": {
                // REQUIRED PARAMETERS
                String username = request.getParameter("username");
                if(username == null) {
                    response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Missing required parameters");
                    return;
                }

                // Get the info for all posts posted by user with name username
                ArrayList<Integer> postids = new ArrayList<Integer>();
                ArrayList<String> titles = new ArrayList<String>();
                ArrayList<String> create_times = new ArrayList<String>();
                ArrayList<String> modify_times = new ArrayList<String>();
                try {
                    /* CREATE CONNECTION OBJECT INSTANCE */
                    c = DriverManager.getConnection("jdbc:mariadb://localhost:3306/CS144", "cs144", "");

                    /* CREATE PREPAREDSTATEMENT FOR QUERY; SORT TUPLES BY ASCENDING POSTID */
                    ps = c.prepareStatement("SELECT * FROM Posts WHERE username = ? ORDER BY postid ASC");
                    ps.setString(1, username);

                    /* EXECUTE QUERY */
                    rs = ps.executeQuery();

                    /* IF RESULTSET EMPTY, RETURN 404; OTHERWISE ADD EACH POST'S INFO TO APPROPRIATE ARRAYLIST */
                    if(rs.next() == false) {
                        try { rs.close(); } catch (Exception e) { /* ignored */ }
                        try { ps.close(); } catch (Exception e) { /* ignored */ }
                        try { c.close(); } catch (Exception e) { /* ignored */ }
                        response.sendError(HttpServletResponse.SC_NOT_FOUND, "Posts from user with given username not found");
                        return;
                    }
                    else {
                        do {
                            Integer post_id = rs.getInt("postid");
                            String post_title = rs.getString("title");
                            String created_time = rs.getTimestamp("created").toString();
                            String modified_time = rs.getTimestamp("modified").toString();
                            
                            postids.add(post_id);
                            titles.add(post_title);
                            create_times.add(created_time);
                            modify_times.add(modified_time);                          
                        } while(rs.next());
                    }
                } 
                catch(SQLException ex) {
                    try { rs.close(); } catch (Exception e) { /* ignored */ }
                    try { ps.close(); } catch (Exception e) { /* ignored */ }
                    try { c.close(); } catch (Exception e) { /* ignored */ }
                    response.sendError(HttpServletResponse.SC_NOT_FOUND, "SQLException encountered");
                    return;
                }
                finally {
                    try { rs.close(); } catch (Exception e) { /* ignored */ }
                    try { ps.close(); } catch (Exception e) { /* ignored */ }
                    try { c.close(); } catch (Exception e) { /* ignored */ }
                }

                // Send data necessary for presentation and form submissions
                page_title = "Post List (List Page)";
                request.setAttribute("page_title", page_title);
                request.setAttribute("username", username);
                request.setAttribute("postids", postids);
                request.setAttribute("titles", titles);
                request.setAttribute("create_times", create_times);
                request.setAttribute("modify_times", modify_times);

                response.setStatus(HttpServletResponse.SC_OK);
                request.getRequestDispatcher("/list.jsp").forward(request, response);
                break;
            }
            default:
                // If action is not one of the 3 GET actions (open, preview, list), return 404
                response.sendError(HttpServletResponse.SC_NOT_FOUND, "Invalid or missing action parameter");
                break;
        }
        return;
    }
    
    /**
     * Handles HTTP POST requests
     * 
     * @see javax.servlet.http.HttpServlet#doPost(HttpServletRequest request,
     *      HttpServletResponse response)
     */
    public void doPost(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException 
    {
	// implement your POST method handling code here
	// currently we simply show the page generated by "edit.jsp"
        
        /* JDBC OBJECTS */
        Connection c = null;
        PreparedStatement ps = null; 
        ResultSet rs = null;
        int num_affected_rows = 0;

        /* GET THE ACTION WE ARE DOING (open, save, delete, preview, list) */
        String action_type = request.getParameter("action");

        /* HANDLE THE ACTION */
        String page_title;
        switch(action_type) {
            case "open": {
                // REQUIRED PARAMETERS
                String username = request.getParameter("username");
                String postid = request.getParameter("postid");
                if(username == null || postid == null) {
                    response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Missing required parameters");
                    return;
                }

                // OPTIONAL PARAMETERS
                String post_title = request.getParameter("title");
                String post_body = request.getParameter("body");

                // Parse postid, make sure it's a number
                int postid_num;
                try {
                    postid_num = Integer.parseInt(postid);
                }
                catch(NumberFormatException ex) {
                    response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid postid");
                    return;
                }

                // Handle edit page according to postid value
                if(postid_num == 0) { 
                    if(post_title == null) { post_title = ""; }
                    if(post_body == null) { post_body = ""; }
                }
                else if(postid_num > 0) { 
                    if(post_title == null || post_body == null) {
                        try {
                            /* CREATE CONNECTION OBJECT INSTANCE */
                            c = DriverManager.getConnection("jdbc:mariadb://localhost:3306/CS144", "cs144", "");

                            /* CREATE PREPAREDSTATEMENT FOR QUERY */
                            ps = c.prepareStatement("SELECT * FROM Posts WHERE username = ? AND postid = ?");
                            ps.setString(1, username);
                            ps.setInt(2, postid_num);

                            /* EXECUTE QUERY */
                            rs = ps.executeQuery();

                            /* IF RESULT SET IS EMPTY, RETURN 404 NOT FOUND; OTHERWISE GET THE POST'S TITLE AND BODY */
                            if(rs.next() == false) {
                                try { rs.close(); } catch (Exception e) { /* ignored */ }
                                try { ps.close(); } catch (Exception e) { /* ignored */ }
                                try { c.close(); } catch (Exception e) { /* ignored */ }
                                response.sendError(HttpServletResponse.SC_NOT_FOUND, "Post with specified username or postid not found");
                                return;
                            }
                            else {
                                do {
                                    post_title = rs.getString("title");
                                    post_body = rs.getString("body");
                                } while(rs.next());
                            }
                        } 
                        catch(SQLException ex) {
                            try { rs.close(); } catch (Exception e) { /* ignored */ }
                            try { ps.close(); } catch (Exception e) { /* ignored */ }
                            try { c.close(); } catch (Exception e) { /* ignored */ }
                            response.sendError(HttpServletResponse.SC_NOT_FOUND, "SQLException encountered");
                            return;
                        }
                        finally {
                            try { rs.close(); } catch (Exception e) { /* ignored */ }
                            try { ps.close(); } catch (Exception e) { /* ignored */ }
                            try { c.close(); } catch (Exception e) { /* ignored */ }
                        }
                    }
                }
                else {
                    response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid postid");
                    return;
                }

                // Send data necessary for presentation and form submissions
                page_title = "Edit Post (Edit Page)";
                request.setAttribute("page_title", page_title);
                request.setAttribute("username", username);
                request.setAttribute("postid", postid_num);
                request.setAttribute("post_title", post_title);
                request.setAttribute("post_body", post_body);

                response.setStatus(HttpServletResponse.SC_OK);
                request.getRequestDispatcher("/edit.jsp").forward(request, response);
                break;
            }
            case "save": {
                // REQUIRED PARAMETERS
                String username = request.getParameter("username");
                String postid = request.getParameter("postid");
                String post_title = request.getParameter("title");
                String post_body = request.getParameter("body");
                if(username == null || postid == null || post_title == null || post_body == null) {
                    response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Missing required parameters");
                    return;
                }

                // Get current time for created/modified times
                Timestamp current_time = new Timestamp(System.currentTimeMillis());
                
                // Parse postid, make sure it's a number
                int postid_num;
                try {
                    postid_num = Integer.parseInt(postid);
                }
                catch(NumberFormatException ex) {
                    response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid postid");
                    return;
                }

                try {
                    /* CREATE CONNECTION OBJECT INSTANCE */
                    c = DriverManager.getConnection("jdbc:mariadb://localhost:3306/CS144", "cs144", "");

                    // Handle save according to postid value
                    if(postid_num == 0) { 
                        /* CREATE PREPAREDSTATEMENT FOR QUERY TO GET MAX POSTID; COALESCE WITH 0 IN CASE RETURNED AGGREGATE IS NULL */
                        ps = c.prepareStatement("SELECT COALESCE(MAX(postid), 0) FROM Posts WHERE username = ?");
                        ps.setString(1, username);

                        /* EXECUTE QUERY */
                        rs = ps.executeQuery();

                        /* GET NEW POSTID FOR NEW POST; CHECK IF RESULT SET EMPTY (IT SHOULDN'T BE SINCE AGGREGATE RETURNS AT LEAST NULL) */
                        int post_id;
                        if(rs.next() == false) {
                            try { rs.close(); } catch (Exception e) { /* ignored */ }
                            try { ps.close(); } catch (Exception e) { /* ignored */ }
                            try { c.close(); } catch (Exception e) { /* ignored */ }
                            response.sendError(HttpServletResponse.SC_NOT_FOUND, "Post with specified username or postid not found");
                            return;
                        }
                        else {
                            do {
                                post_id = rs.getInt(1) + 1;                        
                            } while(rs.next());
                        }

                        /* CREATE PREPAREDSTATEMENT TO INSERT NEW POST */
                        ps = c.prepareStatement("INSERT INTO Posts (username, postid, title, body, modified, created) VALUES (?, ?, ?, ?, ?, ?)");
                        ps.setString(1, username);
                        ps.setInt(2, post_id);
                        ps.setString(3, post_title);
                        ps.setString(4, post_body);
                        ps.setTimestamp(5, current_time);
                        ps.setTimestamp(6, current_time);
                    }
                    else if(postid_num > 0) { 
                        /* CREATE PREPAREDSTATEMENT TO UPDATE POST */
                        ps = c.prepareStatement("UPDATE Posts SET title = ?, body = ?, modified = ? WHERE username = ? AND postid = ?");
                        ps.setString(1, post_title);
                        ps.setString(2, post_body);
                        ps.setTimestamp(3, current_time);
                        ps.setString(4, username);
                        ps.setInt(5, postid_num);
                    }
                    else {
                        response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid postid");
                        return;
                    }

                    /* EXECUTE INSERT OR UPDATE */
                    num_affected_rows = ps.executeUpdate();
                    // Check if we affected >0, or else return 404
                    if(num_affected_rows <= 0) {
                        try { rs.close(); } catch (Exception e) { /* ignored */ }
                        try { ps.close(); } catch (Exception e) { /* ignored */ }
                        try { c.close(); } catch (Exception e) { /* ignored */ }
                        response.sendError(HttpServletResponse.SC_NOT_FOUND, "Failed to update or insert post");
                        return;
                    }
                } 
                catch(SQLException ex) {
                    try { rs.close(); } catch (Exception e) { /* ignored */ }
                    try { ps.close(); } catch (Exception e) { /* ignored */ }
                    try { c.close(); } catch (Exception e) { /* ignored */ }
                    response.sendError(HttpServletResponse.SC_NOT_FOUND, "SQLException encountered");
                    return;
                }
                finally {
                    try { rs.close(); } catch (Exception e) { /* ignored */ }
                    try { ps.close(); } catch (Exception e) { /* ignored */ }
                    try { c.close(); } catch (Exception e) { /* ignored */ }
                }

                // Send data necessary for presentation and form submissions; username to redirect to list page
                page_title = "Redirecting";
                request.setAttribute("page_title", page_title);
                request.setAttribute("username", username);

                response.setStatus(HttpServletResponse.SC_OK);
                request.getRequestDispatcher("/list_redirect.jsp").forward(request, response);
                break;
            }
            case "delete": {
                // REQUIRED PARAMETERS
                String username = request.getParameter("username");
                String postid = request.getParameter("postid");
                if(username == null || postid == null) {
                    response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Missing required parameters");
                    return;
                }

                // Parse postid, make sure it's a number
                int postid_num;
                try {
                    postid_num = Integer.parseInt(postid);
                }
                catch(NumberFormatException ex) {
                    response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid postid");
                    return;
                }

                // Delete post with given username and postid
                try {
                    /* CREATE CONNECTION OBJECT INSTANCE */
                    c = DriverManager.getConnection("jdbc:mariadb://localhost:3306/CS144", "cs144", "");

                    /* CREATE PREPAREDSTATEMENT TO DELETE POST */
                    ps = c.prepareStatement("DELETE FROM Posts WHERE username = ? AND postid = ?");
                    ps.setString(1, username);
                    ps.setInt(2, postid_num);
                    
                    /* EXECUTE DELETE */
                    num_affected_rows = ps.executeUpdate();
                    // Check if we affected >0 rows, or else return 404
                    if(num_affected_rows <= 0) {
                        try { rs.close(); } catch (Exception e) { /* ignored */ }
                        try { ps.close(); } catch (Exception e) { /* ignored */ }
                        try { c.close(); } catch (Exception e) { /* ignored */ }
                        response.sendError(HttpServletResponse.SC_NOT_FOUND, "Post to be deleted not found");
                        return;
                    }
                } 
                catch(SQLException ex) {
                    try { rs.close(); } catch (Exception e) { /* ignored */ }
                    try { ps.close(); } catch (Exception e) { /* ignored */ }
                    try { c.close(); } catch (Exception e) { /* ignored */ }
                    response.sendError(HttpServletResponse.SC_NOT_FOUND, "SQLException encountered");
                    return;
                }
                finally {
                    try { rs.close(); } catch (Exception e) { /* ignored */ }
                    try { ps.close(); } catch (Exception e) { /* ignored */ }
                    try { c.close(); } catch (Exception e) { /* ignored */ }
                }

                // Send data necessary for presentation and form submissions; username to redirect to list page
                page_title = "Redirecting";
                request.setAttribute("page_title", page_title);
                request.setAttribute("username", username);

                response.setStatus(HttpServletResponse.SC_OK);
                request.getRequestDispatcher("/list_redirect.jsp").forward(request, response);
                break;
            }
            case "preview": {
                // REQUIRED PARAMETERS
                String username = request.getParameter("username");
                String postid = request.getParameter("postid");
                String post_title = request.getParameter("title");
                String post_body = request.getParameter("body");
                if(username == null || postid == null || post_title == null || post_body == null) {
                    response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Missing required parameters");
                    return;
                }

                // Parse postid, make sure it's a number
                int postid_num;
                try {
                    postid_num = Integer.parseInt(postid);
                }
                catch(NumberFormatException ex) {
                    response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid postid");
                    return;
                }

                // Send data necessary for presentation and form submissions
                page_title = "Preview Post (Preview Page)";
                request.setAttribute("page_title", page_title);
                request.setAttribute("username", username);
                request.setAttribute("postid", postid_num);
                request.setAttribute("post_title", post_title);
                request.setAttribute("post_body", post_body);

                response.setStatus(HttpServletResponse.SC_OK);
                request.getRequestDispatcher("/preview.jsp").forward(request, response);
                break;
            }
            case "list": {
                // REQUIRED PARAMETERS
                String username = request.getParameter("username");
                if(username == null) {
                    response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Missing required parameters");
                    return;
                }

                // Get the info for all posts posted by user with name username
                ArrayList<Integer> postids = new ArrayList<Integer>();
                ArrayList<String> titles = new ArrayList<String>();
                ArrayList<String> create_times = new ArrayList<String>();
                ArrayList<String> modify_times = new ArrayList<String>();
                try {
                    /* CREATE CONNECTION OBJECT INSTANCE */
                    c = DriverManager.getConnection("jdbc:mariadb://localhost:3306/CS144", "cs144", "");

                    /* CREATE PREPAREDSTATEMENT FOR QUERY; SORT TUPLES BY ASCENDING POSTID */
                    ps = c.prepareStatement("SELECT * FROM Posts WHERE username = ? ORDER BY postid ASC");
                    ps.setString(1, username);

                    /* EXECUTE QUERY */
                    rs = ps.executeQuery();

                    /* IF RESULTSET EMPTY, RETURN 404; OTHERWISE ADD EACH POST'S INFO TO APPROPRIATE ARRAYLIST */
                    if(rs.next() == false) {
                        try { rs.close(); } catch (Exception e) { /* ignored */ }
                        try { ps.close(); } catch (Exception e) { /* ignored */ }
                        try { c.close(); } catch (Exception e) { /* ignored */ }
                        response.sendError(HttpServletResponse.SC_NOT_FOUND, "Posts from user with given username not found");
                        return;
                    }
                    else {
                        do {
                            Integer post_id = rs.getInt("postid");
                            String post_title = rs.getString("title");
                            String created_time = rs.getTimestamp("created").toString();
                            String modified_time = rs.getTimestamp("modified").toString();
                            
                            postids.add(post_id);
                            titles.add(post_title);
                            create_times.add(created_time);
                            modify_times.add(modified_time);                          
                        } while(rs.next());
                    }
                } 
                catch(SQLException ex) {
                    try { rs.close(); } catch (Exception e) { /* ignored */ }
                    try { ps.close(); } catch (Exception e) { /* ignored */ }
                    try { c.close(); } catch (Exception e) { /* ignored */ }
                    response.sendError(HttpServletResponse.SC_NOT_FOUND, "SQLException encountered");
                    return;
                }
                finally {
                    try { rs.close(); } catch (Exception e) { /* ignored */ }
                    try { ps.close(); } catch (Exception e) { /* ignored */ }
                    try { c.close(); } catch (Exception e) { /* ignored */ }
                }

                // Send data necessary for presentation and form submissions
                page_title = "Post List (List Page)";
                request.setAttribute("page_title", page_title);
                request.setAttribute("username", username);
                request.setAttribute("postids", postids);
                request.setAttribute("titles", titles);
                request.setAttribute("create_times", create_times);
                request.setAttribute("modify_times", modify_times);

                response.setStatus(HttpServletResponse.SC_OK);
                request.getRequestDispatcher("/list.jsp").forward(request, response);
                break;
            }
            default:
                // If action is not one of the 5 POST actions (open, save, delete, preview, list), return 404
                response.sendError(HttpServletResponse.SC_NOT_FOUND, "Invalid or missing action parameter");
                break;
        }
        return;
    }
}
